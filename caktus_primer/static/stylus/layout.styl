element()
	padding: 0.5em

.l-row
	display: flex
	flex-direction: row
	width: 100%

	> *
		element()
		flex-grow: 1

l-column()
	display: flex
	flex-direction: column
	width: 100%

	> *
		element()
		flex-grow: 1

wrapping(limit)
	flex-wrap: wrap

	> *
		flex-basis: "calc(100% / %s)" % (limit)
		flex-grow: 0

limit(limit)
	flex-wrap: nowrap
	overflow-x: hidden

	> *
		flex-basis: "calc(100% / %s)" % (limit)
		flex-shrink: 0

panels(direction, ratios...)
	display: flex
	flex-direction: direction

	for i in (1..length(ratios))
		ratio = ratios[i - 1]

		> *:nth-child({i})
			flex-basis: "calc(%s * 100%)" % (ratio)

row(gutter-min, gutter-max, ratios...)
	display: flex
	justify-content: space-between
	flex-wrap: nowrap

	for i in (1..length(ratios))
		ratio = ratios[i - 1]

		> *:nth-child({i})
			/*
				The total width of content containers in the row is equal to 100% of
				the available area minus the number of gutters between elements times
				the width of the gutters. For example, if there are three panes and
				the gutters occupy 1rem of space, then the total space available for
				panes is 100% - 2rem.

				NOTE: the constructed "context" string will be evaluated within
				the "graduated" mixin, in particular at the point in that mixin
				where the scaling intermediate value of flex-basis is determined.
				The need for using context arises from the fact that we want
				a calculated flex-basis and therefore need to stick the scaling
				expression inside a calc expression that we construct here.
			*/
			left-context = "calc(%s * (100% - ((" % (ratio)
			right-context = ") * %s)))" % (length(ratios) - 1)
			context = left-context + "%s" + right-context
			graduated(flex-basis, gutter-min, gutter-max, 0, context)

textColumns($n, $gap=10px)
	column-count: $n
	column-gap: $gap

// Grid Generation

_grid = {}

gridLayout(width=4, minWidth=0)
	// Reset grid building state
	_grid.row = 1
	_grid.col = 0
	_grid.rowSpan = 0
	_grid.colSpan = 0
	_grid.width = width

	// Setup flex fallback first, to be overridden in browsers supporting Grid
	display: flex
	flex-direction: row
	flex-wrap: wrap
	margin: -0.5em

	> *
		padding: 0.5em
		margin: 0.5em

	@supports (display: grid)
		display: grid
		grid-column-gap: 1em
		grid-row-gap: 1em
		grid-template-columns: auto
		grid-template-rows: auto
		margin: 0
		display: -ms-grid
		// TODO calculate based on width
		-ms-grid-rows: 0.25fr 0.5fr 0.25fr
		-ms-grid-columns: 25% 25% 25% 25%

gridItem(colStart, rowStart, colSpan=-1, rowSpan=1)
	if colSpan == -1
		colSpan = _grid.width

	basis = (colSpan / _grid.width) * 100%
	flex-basis: "calc(%s - 2em)" % basis
	flex-shrink: 0
	flex-grow: 1
	@supports (display: grid)
		margin: 0

	grid-column: colStart / span colSpan
	grid-row: rowStart / span rowSpan
	// With IE11 fallback
	-ms-grid-column: colStart
	-ms-grid-column-span: colSpan
	-ms-grid-row: rowStart
	-ms-grid-row-span: rowSpan

// Mixins
